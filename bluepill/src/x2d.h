#ifndef X2D_H_
#define X2D_H_

#include "struct.h"
#include <stddef.h>
#include <stdbool.h>

// clang-format off


TYPEDEF_ENUM_BEG(X2D_DEVICE)
    X2D_DEVICE_Tyxia_ZZAA = 0,
    X2D_DEVICE_Calybox = 3,
    X2D_DEVICE_Deltia_Emitter = 5,
    X2D_DEVICE_Tydom_Panel_Controller = 13,
    X2D_DEVICE_Tyxia_XXYY = 18,
    X2D_DEVICE_Two_Buttons_Alarm_Remote = 21,
    X2D_DEVICE_Four_Buttons_Alarm_Remote = 22,

    // Detector/Simple
    X2D_DEVICE_Volumetric = 32,
    X2D_DEVICE_Volumetric_Infrared = 33,
    X2D_DEVICE_Volumetric_Pressure = 34,
    X2D_DEVICE_Volumetric_Dual = 35,
    X2D_DEVICE_Perimetric = 40,
    X2D_DEVICE_Perimetric_Contact = 41,
    X2D_DEVICE_Perimetric_Glass_Breakage = 42,
    X2D_DEVICE_Perimetric_Sound = 43,
    X2D_DEVICE_Perimetric_Roller_Shutter = 44,
    X2D_DEVICE_Technical = 48,
    X2D_DEVICE_Technical_Water = 49,
    X2D_DEVICE_Technical_Gas = 50,
    X2D_DEVICE_Technical_Fire = 51,
    X2D_DEVICE_Technical_Smoke = 52,
    X2D_DEVICE_Technical_Frost = 53,
    X2D_DEVICE_Technical_Power_Outage = 54,
    X2D_DEVICE_Technical_Phone_Outage = 55,
    X2D_DEVICE_Technical_Freezer_Outage = 56,

    X2D_DEVICE_USB_Key = 62,
TYPEDEF_ENUM_END(X2D_DEVICE)

TYPEDEF_ENUM_BEG(X2D_ATTRIBUTE)
    X2D_ATTRIBUTE_Simple = 1,
    X2D_ATTRIBUTE_WithData = 5
TYPEDEF_ENUM_END(X2D_ATTRIBUTE)

TYPEDEF_BITFIELD_BEG(X2D_SOURCE, BU8)
    X2D_SOURCE_TYPE_0,
    X2D_SOURCE_TYPE_1,
    X2D_SOURCE_TYPE_2,
    X2D_SOURCE_TYPE_3,
    X2D_SOURCE_TYPE_4,
    X2D_SOURCE_TYPE_5,
    X2D_SOURCE_ID_0,
    X2D_SOURCE_ID_1,
TYPEDEF_BITFIELD_END(X2D_SOURCE, BU8)

TYPEDEF_BITFIELD_BEG(X2D_RECIPIENT, BU8)
    X2D_RECIPIENT_ZONE_0,
    X2D_RECIPIENT_ZONE_1,
    X2D_RECIPIENT_ZONE_2,
    X2D_RECIPIENT_ZONE_3,
    X2D_RECIPIENT_F4,
    X2D_RECIPIENT_F5,
    X2D_RECIPIENT_F6,
    X2D_RECIPIENT_F7,
TYPEDEF_BITFIELD_END(X2D_RECIPIENT, BU8)

TYPEDEF_BITFIELD_BEG(X2D_TRANSMITER, BU8)
    X2D_TRANSMITER_ATTRIBUTE_0,
    X2D_TRANSMITER_ATTRIBUTE_1,
    X2D_TRANSMITER_ATTRIBUTE_2,
    X2D_TRANSMITER_ATTRIBUTE_3,
    X2D_TRANSMITER_BATTERY_FAILLING,
    X2D_TRANSMITER_BOX_OPENED,
    X2D_TRANSMITER_INTERNAL_FAULT_DETECTED,
    X2D_TRANSMITER_ENROLLMENT_REQUESTED,
TYPEDEF_BITFIELD_END(X2D_TRANSMITER, BU8)

TYPEDEF_BITFIELD_BEG(X2D_CONTROL, BU8)
    X2D_CONTROL_F0,
    X2D_CONTROL_F1,
    X2D_CONTROL_ANSWER_REQUESTED,
    X2D_CONTROL_ROLLING_CODE,
    X2D_CONTROL_F4,
    X2D_CONTROL_F5,
    X2D_CONTROL_F6,
    X2D_CONTROL_F7,
TYPEDEF_BITFIELD_END(X2D_CONTROL, BU8)

TYPEDEF_ENUM_BEG(X2D_MESSAGE_DATA_TYPE)
    X2D_MESSAGE_DATA_TYPE_Enrollment = 0,// g EnrolmentMessage
    X2D_MESSAGE_DATA_TYPE_HeatingLevel = 1,// m regulation Confort heating level
    X2D_MESSAGE_DATA_TYPE_FunctioningLevel = 2,// n regulation Auto functioning mode
    X2D_MESSAGE_DATA_TYPE_InternalTemperature = 10,// p Internal temperature command
    X2D_MESSAGE_DATA_TYPE_ExternalTemperature = 11,// o External temperature command
    X2D_MESSAGE_DATA_TYPE_MeterReading = 14,// bit[9] == 6 -> j(BasicMeterReading) else c (MeterReading)
    X2D_MESSAGE_DATA_TYPE_CurrentLevel = 26,//  Current level ?
    X2D_MESSAGE_DATA_TYPE_BasicCommand = 33,//  q BasicCommand
    X2D_MESSAGE_DATA_TYPE_VariationCommand = 34,// d VariationCommand
    X2D_MESSAGE_DATA_TYPE_ScenarioCommand = 35,// k Scenario
    X2D_MESSAGE_DATA_TYPE_Variation = 37,//  e Variation
    X2D_MESSAGE_DATA_TYPE_CurrentTransformerDefinition = 252, // l Current Transformer
TYPEDEF_ENUM_END(X2D_MESSAGE_DATA_TYPE)


TYPEDEF_PACKED_STRUCT_BEG(X2D_TEMPERATURE_MESSAGE)
    VAR(LU16, temperature)
TYPEDEF_PACKED_STRUCT_END(X2D_TEMPERATURE_MESSAGE)

TYPEDEF_ENUM_BEG(X2D_FUNCTIONING_MODE)
    X2D_FUNCTIONING_MODE_Reduced = 0,
    X2D_FUNCTIONING_MODE_Moderato = 1,
    X2D_FUNCTIONING_MODE_Medio = 2,
    X2D_FUNCTIONING_MODE_Confort = 3,
    X2D_FUNCTIONING_MODE_Stop = 4,
    X2D_FUNCTIONING_MODE_AntiFrost = 5,
    X2D_FUNCTIONING_MODE_Special = 6,
    X2D_FUNCTIONING_MODE_Auto = 7,
    X2D_FUNCTIONING_MODE_Centralized = 8,
TYPEDEF_ENUM_END(X2D_FUNCTIONING_MODE)


TYPEDEF_BITFIELD_BEG(X2D_FUNCTIONING_LEVEL_FLAG, BU8)
    X2D_FUNCTIONING_LEVEL_FLAG_MODE_0,
    X2D_FUNCTIONING_LEVEL_FLAG_MODE_1,
    X2D_FUNCTIONING_LEVEL_FLAG_MODE_2,
    X2D_FUNCTIONING_LEVEL_FLAG_MODE_3,
    X2D_FUNCTIONING_LEVEL_FLAG_F4,
    X2D_FUNCTIONING_LEVEL_FLAG_F5,
    X2D_FUNCTIONING_LEVEL_FLAG_DURATION,
    X2D_FUNCTIONING_LEVEL_FLAG_MANUAL,
TYPEDEF_BITFIELD_END(X2D_FUNCTIONING_LEVEL_FLAG, BU8)

TYPEDEF_PACKED_STRUCT_BEG(X2D_FUNCTIONING_LEVEL_MESSAGE)
    BITFIELD_VAR(X2D_FUNCTIONING_LEVEL_FLAG, flag)
    VAR(BU16, duration)
TYPEDEF_PACKED_STRUCT_END(X2D_FUNCTIONING_LEVEL_MESSAGE)


TYPEDEF_ENUM_BEG(X2D_ELECTRICITY_TARIFF)
    X2D_ELECTRICITY_TARIFF_Base = 0,
    X2D_ELECTRICITY_TARIFF_EjpOffPeakDay = 32,
    X2D_ELECTRICITY_TARIFF_EjpPeakDay = 33,
    X2D_ELECTRICITY_TARIFF_DoubleOffPeakHour = 64,
    X2D_ELECTRICITY_TARIFF_DoublePeakHour = 65,
    X2D_ELECTRICITY_TARIFF_TempoBlueDayOffPeakHour = 96,
    X2D_ELECTRICITY_TARIFF_TempoBlueDayPeakHour = 97,
    X2D_ELECTRICITY_TARIFF_TempoWhiteDayOffPeakHour = 98,
    X2D_ELECTRICITY_TARIFF_TempoWhiteDayPeakHour = 99,
    X2D_ELECTRICITY_TARIFF_TempoRedDayOffPeakHour = 100,
    X2D_ELECTRICITY_TARIFF_TempoRedDayPeakHour = 101,
TYPEDEF_ENUM_END(X2D_ELECTRICITY_TARIFF)


TYPEDEF_ENUM_BEG(X2D_REGISTER_SELECTION)
    X2D_REGISTER_SELECTION_CurrentTransformer1 = 0,
    X2D_REGISTER_SELECTION_CurrentTransformer2 = 1,
    X2D_REGISTER_SELECTION_CurrentTransformer3 = 2,
    X2D_REGISTER_SELECTION_Heating = 3,
    X2D_REGISTER_SELECTION_HotWater = 4,
    X2D_REGISTER_SELECTION_Total = 5,
    X2D_REGISTER_SELECTION_Cooling = 7,
    X2D_REGISTER_SELECTION_HeatingAndCooling = 8,
    X2D_REGISTER_SELECTION_ElectricityProduction = 9,
TYPEDEF_ENUM_END(X2D_REGISTER_SELECTION)

TYPEDEF_BITFIELD_BEG(X2D_CURRENT_TARIFF, BU8)
    X2D_CURRENT_TARIFF_F0,
    X2D_CURRENT_TARIFF_F1,
    X2D_CURRENT_TARIFF_F2,
    X2D_CURRENT_TARIFF_F3,
    X2D_CURRENT_TARIFF_EURO,
    X2D_CURRENT_TARIFF_EJP,
    X2D_CURRENT_TARIFF_DOUBLE,
    X2D_CURRENT_TARIFF_F7,
TYPEDEF_BITFIELD_END(X2D_CURRENT_TARIFF, BU8)

TYPEDEF_PACKED_STRUCT_BEG(X2D_METER_READING_MESSAGE)
    ENUM_VAR(X2D_REGISTER_SELECTION, selection)
    BITFIELD_VAR(X2D_CURRENT_TARIFF, flag)
    VAR(LU16, registerLow)
    VAR(LU8, registerHigh)
TYPEDEF_PACKED_STRUCT_END(X2D_METER_READING_MESSAGE)

TYPEDEF_PACKED_STRUCT_BEG(X2D_BODY)
    VAR(BU16, house)
    BITFIELD_VAR(X2D_SOURCE, source)
    BITFIELD_VAR(X2D_RECIPIENT, recipient)
    BITFIELD_VAR(X2D_TRANSMITER, transmitter)
    BITFIELD_VAR(X2D_CONTROL, control)
TYPEDEF_PACKED_STRUCT_END(X2D_BODY)

TYPEDEF_PACKED_STRUCT_BEG(X2D_ROLLING_CODE_FOOTER)
    VAR(BU16, rollingCode)
TYPEDEF_PACKED_STRUCT_END(X2D_ROLLING_CODE_FOOTER)

TYPEDEF_PACKED_STRUCT_BEG(X2D_FOOTER)
    VAR(BU16, checksum)
TYPEDEF_PACKED_STRUCT_END(X2D_FOOTER)

// clang-format on
#ifdef __cplusplus
                                                                                    extern "C"
{
#endif
    void x2d_print(uint8_t * data, size_t size);
    size_t x2d_get_frame_size(uint8_t * data, size_t size);
    uint16_t x2d_compute_checksum(uint8_t * data, size_t size);
#ifdef __cplusplus
}
#endif
#endif